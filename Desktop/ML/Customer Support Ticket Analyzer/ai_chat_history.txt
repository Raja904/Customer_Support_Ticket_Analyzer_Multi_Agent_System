You said:
help m e



The Challenge

Build a multi-agent system using Pydantic AI that demonstrates your ability to:
- Design specialized AI agents that work together
- Engineer and iterate on prompts
- Build evaluation frameworks
- Document your thinking process

You have TWO options to choose from:
1. Customer Support Ticket Analyzer & Router
2. Financial News Impact Analyzer

Full details: https://drive.google.com/drive/folders/15N_vaHCX7KRIB2IoQfIYqIzz1rIB1TCe?usp=sharing

What We're Looking For

- Problem-solving approach over perfect code
- Clear thinking documented through your iterations
- Practical solutions that could work in production
- Self-learning ability (you'll need to read Pydantic AI docs)

Submission Instructions

1. Complete ONE of the two case study options
2. Push your code to a public GitHub repository including:
- Your working code
- Your full AI conversation history (as ai_chat_history.txt)
- Documentation of your approach
3. Reply to this email with:
- GitHub repository link
- Brief write-up of what didn't work and why (5-10 bullet points)
- (Optional but recommended) Video link (3-5 mins) explaining your approach
- Simple screen recording is fine
- Candidates with videos get priority review

Important Notes

- AI tools are allowed and encouraged - we care about your ability to build working solutions
- Documentation is crucial - explain your design decisions and prompt iterations
- Don't over-engineer - we prefer simple, working solutions
- Don't skip the evaluation - testing your system is part of the challenge


ChatGPT said:
Got it — you’re tackling an exciting multi-agent challenge! Let’s break this down so you can move fast and build a solid solution. I’ll outline steps, architecture ideas, and what to include for submission.

🚀 1️⃣ Choose Your Case
Since both options are valid, pick the one you feel most confident about:

Customer Support Ticket Analyzer & Router

Easier if you have experience in text classification / sentiment / topic extraction.

Financial News Impact Analyzer

Better if you’re comfortable with finance concepts, market impact analysis, sentiment.

👉 If you tell me your preference, I can help with agent design immediately.

🚀 2️⃣ Define Multi-Agent Architecture
Here’s an example for each:

💡 Customer Support Ticket Router (example architecture)
✅ Agent 1: Preprocessor
→ Cleans ticket text (removes PII, normalizes)

✅ Agent 2: Intent & Sentiment Classifier
→ Identifies intent (billing issue, tech support, etc) + sentiment

✅ Agent 3: Priority Assessor
→ Tags ticket with urgency level (low/med/high)

✅ Agent 4: Router
→ Decides the right team to handle the ticket

💡 Financial News Impact Analyzer (example architecture)
✅ Agent 1: News Preprocessor
→ Cleans and normalizes news headline/body

✅ Agent 2: Sentiment & Impact Classifier
→ Classifies sentiment (positive/neg/neutral) + predicts likely market impact

✅ Agent 3: Entity Extractor
→ Extracts company names, sectors

✅ Agent 4: Summary Generator
→ Creates short actionable insights

🚀 3️⃣ Use Pydantic AI
👉 You’ll need to:

Define agent input/output schemas using Pydantic models

Chain agent calls (manual orchestration or loop)

Log prompt iterations + outputs

🚀 4️⃣ Evaluation
👉 Build a simple framework:

Use sample inputs → expected outputs → actual outputs → score (pass/fail or qualitative comments)

Example: Does router agent assign the correct team for ticket with “refund issue”?

🚀 5️⃣ Document Your Thinking
✨ Create:

README.md with:

Agent design diagram

Prompt design decisions

What worked / what failed

Improvements you’d try with more time

ai_chat_history.txt
👉 Save conversations with GPT / other tools

🚀 6️⃣ GitHub Repo Structure
bash
Copy
Edit
/multi-agent-pydantic
 ├── src/
 │    ├── agents.py
 │    ├── orchestrator.py
 │    └── evaluator.py
 ├── ai_chat_history.txt
 ├── README.md
 └── requirements.txt
🚀 7️⃣ Submission Checklist
✅ Push to GitHub
✅ Include:

Working code

ai_chat_history.txt

Documentation of design choices + iterations
✅ Email them:

Repo link

5-10 bullets on what didn’t work + why

(Optional) 3-5 min video walking through solution

💬 Next Step
👉 Tell me:

Which case study did you choose?

Do you want help drafting code, agent schema, or prompts?

I can help you sketch code, design the agent flow, or even write initial prompt templates.

Shall we get started? 🚀








You said:
AAII EEnnggiinneeeerr CCaassee SSttuuddyy -- MMuullttii--AAggeenntt
SSyysstteemmss

Your Mission: Build a multi-agent system using Pydantic AI that demonstrates your ability to design
specialized AI agents that work together effectively.
Time Investment: 2

3 hours suggested (quality matters more than speed)

Deadline: 72 hours from receipt

Choose Your Focus Area

Option A

Customer Support Ticket Analyzer

Build a system with at least 2 specialized agents that analyze support tickets and determine
appropriate routing.
Input Format:

{
"ticket_id": "12345",
"customer_tier": "premium", # free/premium/enterprise
"subject": "API returning 500 errors intermittently",
"message": "Hi, our production system has been failing
",

"previous_tickets": 3,
"monthly_revenue": 5000,
"account_age_days": 450
}

Option B

Financial News Impact Analyzer

Build a system with at least 2 specialized agents that analyze financial news and assess market
impact.
Input Format:

{
"article_id": "news_001",
"headline": "TechCorp announces record Q3 earnings
",

"content": "TechCorp (NASDAQ: TECH) reported
",

"published_at": "2024-10-15T14:30:00Z"
}

Core Requirements

1. Multi-Agent System
Minimum 2 agents with distinct roles and
perspectives
Use Pydantic AI (docs)
Clear inter-agent communication
Think about: What happens when agents
have different opinions?

2. Evaluation Framework
Test on all 5 provided test cases
Implement at least 3 metrics
Document performance
Consider: How consistent are your
agents?

3. Documentation
System architecture - why multiple
agents?
Design decisions and rationale
2
3 prompt iterations showing
improvement
Examples of interesting test case
behaviors

Deliverables
Code: Working implementation

AI Chat Export: Full conversation history showing your development process (as
ai_chat_history.txt )
Brief Write-up: What didn't work and why
5
10 bullet points)

Video
Optional but Recommended): 3

5 minute explanation of your approach

Simple screen recording is fine
Candidates with videos get priority review

Evaluation Criteria
We're looking for:
Clear thinking and problem-solving approach
Ability to design truly specialized agents (not just one agent with different prompts)
Understanding of multi-agent coordination - how do agents work together?
Handling of edge cases - what happens in tricky situations?
Quality of evaluation framework
How you used AI tools effectively (shown via chat history)

Key Insight: The best solutions show agents that truly complement each other, not just divide work.

Test Data

Option A

Customer Support Tickets

TTiicckkeett SSUUPP
000011

{
"ticket_id": "SUP-001",
"customer_tier": "free",
"subject": "This product is completely broken!!!",
"message": "Nothing works! I can't even log in. This is the worst software I've ever used. I'm
"previous_tickets": 0,
"monthly_revenue": 0,
"account_age_days": 2
}

TTiicckkeett SSUUPP
000022

{
"ticket_id": "SUP-002",
"customer_tier": "enterprise",
"subject": "Minor UI issue with dashboard",
"message": "Hi team, just noticed the dashboard numbers are slightly misaligned on mobile view
"previous_tickets": 15,
"monthly_revenue": 25000,
"account_age_days": 730
}

TTiicckkeett SSUUPP
000033

{
"ticket_id": "SUP-003",
"customer_tier": "premium",
"subject": "Feature Request: Bulk export",
"message": "We need bulk export functionality for our quarterly reports. Currently exporting o
"previous_tickets": 5,
"monthly_revenue": 5000,
"account_age_days": 400
}

TTiicckkeett SSUUPP
000044

{
"ticket_id": "SUP-004",
"customer_tier": "premium",
"subject": "API rate limits unclear",
"message": "Getting rate limited but documentation says we should have 1000 requests/hour. We'
"previous_tickets": 8,
"monthly_revenue": 3000,
"account_age_days": 180
}

TTiicckkeett SSUUPP
000055

{
"ticket_id": "SUP-005",
"customer_tier": "enterprise",
"subject": "Urgent: Security vulnerability?",
"message": "Our security team flagged that your API responses include internal server paths in
"previous_tickets": 20,
"monthly_revenue": 50000,
"account_age_days": 900
}

Option B

Financial News Articles

AArrttiiccllee FFIINN
000011

{
"article_id": "FIN-001",
"headline": "Tesla crushes Q3 expectations with record profits, but Musk warns of 'turbulent t
"content": "Tesla (NASDAQ: TSLA) reported stunning Q3 results with earnings of $1.05 per share
"published_at": "2024-10-22T16:00:00Z"
}

AArrttiiccllee FFIINN
000022

{
"article_id": "FIN-002",
"headline": "Small biotech CureGen soars on FDA approval, analysts remain skeptical",
"content": "CureGen (NASDAQ: CURE), a small-cap biotech, received FDA approval for its novel c
"published_at": "2024-11-01T14:30:00Z"
}

AArrttiiccllee FFIINN
000033

{
"article_id": "FIN-003",
"headline": "Amazon announces 'transformational' AI venture, but at massive cost",
"content": "Amazon (NASDAQ: AMZN) unveiled Project Olympus, a $50 billion investment in AGI de
"published_at": "2024-09-15T09:00:00Z"
}

AArrttiiccllee FFIINN
000044

{
"article_id": "FIN-004",
"headline": "Regional bank FirstState posts record earnings amid industry turmoil",
"content": "FirstState Bank (NYSE: FSB) reported record Q2 earnings of $3.20 per share, up 45%
"published_at": "2024-10-12T10:30:00Z"
}

AArrttiiccllee FFIINN
000055

{
"article_id": "FIN-005",
"headline": "China tech giant ByteDance reports stellar growth, regulatory clouds remain",
"content": "ByteDance, TikTok's parent company, leaked financials show revenue grew 70% to $12
"published_at": "2024-11-21T18:45:00Z"
}

Submission Structure

your-name-case-study/
├── main.py
├── agents/
├── evaluation/
├── docs/
├── ai_chat_history.txt # YOUR FULL AI CONVERSATION
└── README.md

Note: The test cases cover various scenarios - some straightforward, others more nuanced. Your
system should handle the full spectrum.

Good luck!
We're looking for thoughtful engineers who value clarity and precision.


ChatGPT said:
Great — thanks for sharing the full details of the AI Engineer Case Study! Let’s break it down so you can move forward confidently.

🚀 What You Need to Do
👉 Pick ONE option

Option A: Customer Support Ticket Analyzer & Router

Option B: Financial News Impact Analyzer

👉 Build a multi-agent system

At least 2 specialized agents

Agents must communicate/collaborate (not just isolated)

Agents should sometimes have different opinions → you must design how conflicts are resolved.

👉 Create an evaluation framework

Use the 5 provided test cases

Implement at least 3 metrics (e.g. consistency, accuracy, agreement rate, etc.)

👉 Document everything

Architecture diagram

Design decisions + reasoning

Prompt iterations (show how you improved prompts — at least 2-3 rounds)

Interesting behaviors or edge cases

👉 Deliver

Code: main.py, agents/, evaluation/, etc.

Full AI conversation: ai_chat_history.txt

README.md: explain design + usage

Brief write-up: 5-10 bullets on what didn’t work

(Optional) Video explaining your approach (3-5 min)

🌟 Recommended Approach
1️⃣ Pick the easier/clearer option for you
If you want my advice:

Customer Support Ticket Analyzer (Option A) is easier for defining clear agent roles:

📌 Sentiment/urgency detector agent

📌 Routing decision agent (e.g. assign to tech support, billing, etc.)

Easy to evaluate: accuracy of routing + consistency.

Financial News Impact Analyzer (Option B) may need more domain knowledge (market impact assessment can be subjective).

2️⃣ Design agents
✅ Example for Option A:

Agent 1: Urgency/Sentiment Agent

Analyze tone, urgency level, potential risk.

e.g. Urgent + Enterprise → prioritize immediately.

Agent 2: Routing Agent

Decide destination team (e.g. Tech Support, Product Team, Billing).

Use customer tier + issue type.

✅ Example for Option B:

Agent 1: Sentiment/Impact Predictor

Agent 2: Risk/Volatility Assessor

3️⃣ Define communication
Agents output intermediate results → pass to next agent

If opinions clash → design tie-breaker (e.g. rules, confidence score)

4️⃣ Evaluation framework
Test on provided cases:

Metrics (for Option A, as example):

🔹 Routing accuracy

🔹 Urgency consistency

🔹 Agent agreement rate

🔹 Response time (simulated)

5️⃣ Document iterations
Show:

How your first prompts were too generic

How you added specific criteria (e.g. define “urgent” clearly, or specify routing logic)

How you improved agent coordination

🛠 Suggested Project Structure
perl
Copy
Edit
your-name-case-study/
├── main.py                # Entry point to run the system
├── agents/
│   ├── urgency_agent.py    # Agent 1 code
│   ├── routing_agent.py    # Agent 2 code
├── evaluation/
│   └── evaluator.py        # Metrics + test runs
├── docs/
│   └── architecture.md     # Design explanation + diagrams
├── ai_chat_history.txt     # Full chat logs showing your dev process
├── README.md               # How to run + your reasoning
💡 How I can help you now
✅ I can help you:

Design the agents (prompt ideas, logic flow)

Write code templates (Pydantic AI + Python)

Sketch architecture diagrams

Create test harness for evaluation

Draft README + documentation skeleton

📌 Next step — please tell me
👉 Which option are you choosing?
👉 Do you want me to help sketch the agents + flow?
👉 Do you want code templates to start faster?

Once you tell me, I can generate starter code + design for you within minutes! 🚀








You said:
HOW MUCH TIME IT WOULD TAKE


ChatGPT said:
Thanks for sharing the full case study details! Let’s break down the time required realistically:

🕒 Estimated Time for Each Part
Task	Time Estimate
✅ Planning & Architecture (choose option, design agents, design flow)	30-45 mins
✅ Prompt engineering for agents (initial drafts + iteration)	30-45 mins
✅ Coding agents (Pydantic AI + agent logic)	1 - 1.5 hours
✅ Multi-agent coordination (agent communication + conflict resolution)	30-45 mins
✅ Evaluation framework (metrics + tests on 5 cases)	45 mins - 1 hr
✅ Documentation (architecture, design rationale, prompt iterations, examples)	45 mins
✅ AI chat export + clean-up	15 mins
✅ (Optional) Video recording	15-30 mins

⏳ Total realistic time
👉 ~4-6 hours of focused work
⚠️ If you’re highly familiar with Pydantic AI and multi-agent systems → you might finish closer to 3-4 hours.

📝 Factors affecting time
If you need to learn or look up Pydantic AI syntax → +1-2 hours.

If you want a polished solution (nice prompts, clean coordination logic) → closer to 6 hours.

If you aim for the optional video → add ~30 mins.

⚡ Suggested strategy to finish within ~4 hours:
✅ Pick Option A or B quickly → I can help you decide.
✅ Use clear, simple agent roles (e.g., “Urgency Classifier” + “Specialist Router”)
✅ Start with basic working code; refine after first test case results
✅ Document as you go so you don’t have to write everything at the end

👉 If you want, I can help you:

Choose Option A or B

Draft the agent architecture quickly

Provide starter code and prompt ideas

Would you like that? And do you have a preference: Customer Support Analyzer (A) or Financial News Analyzer (B)?








You said:
which is easier and simpler


ChatGPT said:
🔥 Great question, Rajeev — let’s analyze both options so you can choose smartly.

✅ Option A — Customer Support Ticket Analyzer
👉 What you have to build:

2+ agents that:

Analyze ticket priority/urgency (e.g., is this critical? security? UI issue?)

Decide routing (e.g., engineering team, account management, support)

Input has rich structured data: customer_tier, monthly_revenue, previous_tickets, etc.

👉 Why it's easier:

Clear, structured input → easier to write prompt logic.

Obvious agent roles (e.g., one agent classifies type/urgency, one routes based on tier/revenue).

Domain is simpler → no need to understand complex financial terms.

Evaluation is straightforward: did it route correctly? did urgency match?

👉 Challenge:

Handle rude/angry messages or unclear tickets gracefully.

✅ Option B — Financial News Impact Analyzer
👉 What you have to build:

2+ agents that:

Analyze the news (positive/negative impact, confidence level).

Assess market sector impact (e.g., is this good/bad for tech? for markets generally?)

Input is unstructured text (headline + article).

👉 Why it’s harder:

Requires parsing freeform text → more chance of ambiguity.

More reasoning needed to infer market impact → risk of inconsistency between agents.

Edge cases harder (e.g., positive earnings but CEO issues warnings → mixed signal).

💡 My recommendation
✅ Pick: Option A - Customer Support Ticket Analyzer

Easier to scope in limited time.

Simpler logic → faster to build working system.

Easier to test + document + create evaluation metrics.

Better fit for demonstrating agent coordination clearly.

If you want, I can help draft the architecture for Option A right now — e.g. agent names, their roles, and how they’ll talk to each other — so you can start coding faster.
Do you want that? 🚀








You said:
lets start with A. Tell me next steps to work with. What we have to built


ChatGPT said:
💯 Awesome choice, Rajeev! Let’s break it down clearly so you can get started efficiently.

🚀 Final goal for Option A
➡ Build a multi-agent system (2+ agents) that:

Takes a customer support ticket as input.

Classifies it (urgency, type, priority).

Decides which team the ticket should be routed to.

Evaluates system performance on 5 test cases using at least 3 metrics.

Documents your reasoning, design, prompt iterations, and chat history.

✅ Suggested system design
1️⃣ Agent 1 — Ticket Classifier
👉 Role: Analyze the ticket and label:

Issue type (e.g., bug, feature request, security issue, UI problem)

Urgency level (low / medium / high / critical)

👉 Example output:

json
Copy
Edit
{
  "issue_type": "bug",
  "urgency": "critical"
}
2️⃣ Agent 2 — Routing Decision Maker
👉 Role: Decide routing based on:

customer_tier (free, premium, enterprise)

monthly_revenue

previous_tickets

Classifier agent’s output (issue_type, urgency)

👉 Example output:

json
Copy
Edit
{
  "team": "Engineering - Critical Bug",
  "escalate": true
}
3️⃣ Evaluation Framework
👉 Create code that:

Runs all 5 test cases.

Tracks at least 3 metrics, e.g.:

Accuracy of issue type detection (manual labels for test data)

Consistency in urgency ratings across agents

Routing correctness (does it match expected route)

4️⃣ Prompt Engineering
Write clear base prompts for each agent.

Iterate 2-3 times on prompts → save prompt versions and outputs.

5️⃣ Directory structure
Your GitHub repo should look like:

perl
Copy
Edit
rajeev-case-study/
├── main.py                # Entry point: runs your system on test cases
├── agents/
│   ├── ticket_classifier.py
│   └── routing_decider.py
├── evaluation/
│   └── evaluate.py
├── docs/
│   └── architecture.png    # Draw system diagram (optional but nice)
│   └── design.md           # Your design notes + prompt iterations
├── ai_chat_history.txt     # Your ChatGPT conversation
└── README.md               # Summary + instructions
✨ Next Steps
✅ Step 1: Set up your code repo with this structure.
✅ Step 2: Define agent 1 (classifier) — write initial prompt + Pydantic schema for output.
✅ Step 3: Define agent 2 (router) — write initial prompt + Pydantic schema.
✅ Step 4: Create test runner — loop through test cases and print agent outputs.
✅ Step 5: Create evaluation script — measure your 3+ metrics.
✅ Step 6: Document decisions, iterations, and lessons learned.

⚡ If you want, I can:
👉 Help write the first version of the agent prompts.
👉 Help create Pydantic schemas for the agent outputs.
👉 Help design the evaluation metrics code skeleton.

Shall we start with the first agent’s prompt + schema? 🚀








You said:
what two agents I can build on what it will do


ChatGPT said:
💡 Great question, Rajeev! Let’s think this through carefully.
Since you need at least 2 specialized agents with distinct roles, here’s a solid, simple, yet powerful design:

⚡ Proposed two-agent setup (Option A: Customer Support Ticket Analyzer)
👑 Agent 1: Ticket Classifier Agent
✅ What it does:

Reads the ticket data (subject + message + metadata like tier, revenue, etc.)

Determines:

Issue type → e.g., bug, feature_request, security_issue, UI_problem, other

Urgency level → low, medium, high, critical

Sentiment (optional) → angry, neutral, polite → could help routing

✅ Why it matters:

Converts raw ticket data into structured labels.

Provides a clean summary for the next agent.

✅ Example output:

json
Copy
Edit
{
  "issue_type": "bug",
  "urgency": "critical",
  "sentiment": "angry"
}
🤖 Agent 2: Routing Decision Agent
✅ What it does:

Takes Agent 1’s output + original metadata

Decides:

Which team should handle the ticket (e.g., Support - Tier 1, Engineering - API, Security Team, Product Team, etc.)

Whether to escalate (e.g., direct to senior engineer / management)

Expected response SLA (optional: e.g., 4 hours, 1 day, etc.)

✅ Why it matters:

Makes a smart routing decision based on labels + business rules (e.g. enterprise customer = faster handling).

✅ Example output:

json
Copy
Edit
{
  "team": "Engineering - API",
  "escalate": true,
  "sla": "4 hours"
}
🚀 Why this is good
Clear separation of concerns:

Agent 1: Understand the ticket

Agent 2: Decide what to do with it

Specialized logic: Each agent can be prompted differently and optimized separately.

Easy to test + measure independently.

📝 Alternative agents (if you want variety)
If you want a different pair of agents, here’s another idea:

Agent 1: Sentiment + priority analyzer → focus only on tone + urgency + risk.

Agent 2: Issue type + team routing → classify issue and assign to the right team.

🎯 What you’ll build
👉 Two Pydantic AI agents (via prompt + schema)
👉 A pipeline to:

Feed ticket JSON → Agent 1 → Agent 2

Collect results + evaluate

👉 A runner to apply this on the 5 test tickets
👉 An evaluator that measures how well your agents did

If you’re ready, I can:
✅ Draft the first version of Agent 1’s Pydantic schema + prompt
✅ Draft Agent 2’s prompt
✅ Help with directory skeleton

Want me to help with Agent 1 first? Or do you want a diagram of the flow? 🚀








You said:
Is pydantic different from langchain


ChatGPT said:
✅ Good question, Rajeev — let’s break it down clearly!

🌟 Pydantic AI vs LangChain
They are different tools that serve different (but complementary) purposes.

🟣 Pydantic (and Pydantic AI)
Pydantic = Python library for data validation + type enforcement.
Example: You define a data model (Ticket, AgentOutput) and Pydantic makes sure the data matches the expected format (e.g. no missing fields, correct types).

Pydantic AI (or OpenAI's Pydantic-like AI tools) =
Uses Pydantic schemas to define the expected output format of an LLM → the LLM fills in a structured object, not just free text.

➡ Think of it as:
👉 “I want the AI to give me a valid Python object (dict, list, etc.) that follows this structure.”
👉 The AI generates the output, Pydantic checks that it matches.

🟠 LangChain
LangChain = Framework for building LLM-powered pipelines:

Chains (combine LLM calls + functions + tools)

Agents (LLM that can decide what tool to call next)

Memory, retrieval, tools, RAG, etc.

➡ Think of it as:
👉 “I want to connect LLMs + tools + memory + logic into an app.”

📝 How they relate
You can use Pydantic inside LangChain!
👉 LangChain lets you define tools/outputs using Pydantic (for validation + type safety).
👉 But you don’t have to use LangChain to use Pydantic AI.

⚡ Example
Pydantic AI	LangChain
Purpose	Structure AI output	Build complex AI apps
Output	Typed objects (dicts, lists)	Any text / tool result / chain result
Example	Ensure LLM outputs {"issue_type": "bug", "urgency": "high"}	Route between multiple tools, memory, and LLMs

✉ In your case study
👉 Pydantic AI → define what the agent should output (e.g. structured ticket labels)
👉 You don’t need LangChain unless you want to build a more complex pipeline (e.g. tool use, retrieval).

💡 Summary:
➡ Pydantic AI: Just for structured, valid AI outputs.
➡ LangChain: Bigger framework for chaining + agents + tools.

If you want, I can show:
✅ How to define an Agent 1 Pydantic schema
✅ Or how this would look in LangChain

👉 Which do you prefer to see first?








You said:
https://ai.pydantic.dev/agents/#introduction


give me code to write agents 


ChatGPT said:
✅ Great! Since you’re referring to Pydantic AI Agents (as per https://ai.pydantic.dev/agents/#introduction), let’s walk through how to write agents for your case: Customer Support Ticket Analyzer (Option A).

⚡ Plan
We’ll create:
1️⃣ UrgencyAgent → Classifies ticket urgency (e.g. critical, high, medium, low).
2️⃣ DepartmentAgent → Decides which team (e.g. support, billing, engineering) should handle it.

⚙ Pydantic AI Agent Code Template
Here’s a starting code you can use in agents/urgency_agent.py and agents/department_agent.py (or together in main.py for simplicity):

python
Copy
Edit
from pydantic_ai.agent import OpenAIAgent
from pydantic_ai.schema import ToolCallSchema
from pydantic_ai.llm import OpenAIChatModel
from pydantic import BaseModel, Field

# Define the ticket input model
class Ticket(BaseModel):
    ticket_id: str
    customer_tier: str
    subject: str
    message: str
    previous_tickets: int
    monthly_revenue: float
    account_age_days: int

# Agent 1 - Urgency agent
class UrgencyOutput(BaseModel):
    urgency: str = Field(..., description="The urgency level: critical, high, medium, low")
    reason: str = Field(..., description="Why this urgency level was chosen")

class UrgencyAgent(OpenAIAgent):
    model = OpenAIChatModel(model="gpt-4-turbo")  # or gpt-3.5-turbo if cost matters
    output_model = UrgencyOutput
    instructions = "You are an AI assistant that analyzes the urgency of customer support tickets."

# Agent 2 - Department routing agent
class DepartmentOutput(BaseModel):
    department: str = Field(..., description="Department to route to: engineering, billing, support, security")
    reason: str = Field(..., description="Why this department was chosen")

class DepartmentAgent(OpenAIAgent):
    model = OpenAIChatModel(model="gpt-4-turbo")
    output_model = DepartmentOutput
    instructions = "You are an AI assistant that routes tickets to the appropriate department."

# Example usage
if __name__ == "__main__":
    # Example ticket
    ticket = Ticket(
        ticket_id="SUP-005",
        customer_tier="enterprise",
        subject="Urgent: Security vulnerability?",
        message="Our security team flagged that your API responses include internal server paths in error responses.",
        previous_tickets=20,
        monthly_revenue=50000,
        account_age_days=900
    )

    urgency_agent = UrgencyAgent()
    department_agent = DepartmentAgent()

    # Run agents
    urgency_result = urgency_agent.run(ticket)
    print("Urgency Result:", urgency_result)

    dept_result = department_agent.run(ticket)
    print("Department Result:", dept_result)
💡 How this works
✅ We define the input ticket (validated by Pydantic)
✅ Each agent generates structured output (Pydantic schema)
✅ Each agent uses its own prompt (instructions)
✅ OpenAIAgent handles the LLM + Pydantic validation

🚀 Next Steps
1️⃣ Add your OpenAI API key (Pydantic AI will pick from OPENAI_API_KEY env var)
2️⃣ Test on your 5 provided tickets
3️⃣ Create an evaluation module (e.g. check consistency, correctness)

📝 Want me to help with?
👉 A ready-to-run folder structure?
👉 The evaluation code?
👉 How to save outputs + generate ai_chat_history.txt?

⚡ Just say the word!








You said:
I have created one agent, create another for routing decision. 


ticket_classfier_agent = Agent(
    'mistral:mistral-large-latest',
    system_prompt=(
        """You are a customer support ticket classifier agent. 
        You will get a ticket in the format:
        
        Input format :
        {
            "ticket_id": "12345",
            "customer_tier": "premium", # free/premium/enterprise
            "subject": "API returning 500 errors intermittently",
            "message": "Hi, our production system has been failing",
            "previous_tickets": 3,
            "monthly_revenue": 5000,
            "account_age_days": 450
        }
        

        
        Your task is to classify the tickets give output in the following format:
        
        Output format: 
        {
            "issue_type": "bug"/"feature_request"/"security_issue"/"UI_problem"/"other",
            "seviority_level": "low"/"medium"/"high"/"critical",
            "sentiment": "angry"/"neutral"/"polite",
            "prioriy_score": 0.95 (between 0 to 1, values near to 1 if the request should have high priority )
        }
        
        Consider these information for deciding the output:
        1. If customer_tier is premium or enterprise then these are important customers.
        2. If subject has system error that needs urgent attention so assign high priority_score.
        3. If previous tickets value, monthly_revenue and account_age_days value is high that means customer is old and has raised issue.
        """
    )
)


routing_decision_agent = Agent(
    'mistral:mistral-large-latest',
    system_prompt=(
        """Your task is to make a routing decsion"""
    )
    
)


ChatGPT said:
✅ Great start with your ticket_classifier_agent! Let’s complete the routing_decision_agent with a clear system prompt and structured output format so that it complements your classifier agent.

🚀 Updated routing_decision_agent code
python
Copy
Edit
routing_decision_agent = Agent(
    'mistral:mistral-large-latest',
    system_prompt=(
        """
        You are a customer support ticket routing agent.

        You will receive a ticket classification result and ticket metadata in the following format:
        
        Input format:
        {
            "ticket_id": "12345",
            "customer_tier": "premium", # free/premium/enterprise
            "subject": "API returning 500 errors intermittently",
            "message": "Hi, our production system has been failing",
            "issue_type": "bug", # from ticket classifier agent
            "seviority_level": "high", # from ticket classifier agent
            "sentiment": "angry", # from ticket classifier agent
            "prioriy_score": 0.85 # from ticket classifier agent
        }

        Your task is to decide which department should handle this ticket and what action is recommended.

        Provide your output in this format:
        {
            "department": "support" / "billing" / "engineering" / "security" / "product",
            "reason": "Short explanation why this department is suitable",
            "recommended_action": "Short recommended next step for the department (e.g., escalate immediately, assign to senior engineer, ask for more info)"
        }

        Guidelines for routing:
        - If issue_type is "security_issue" => route to "security"
        - If issue_type is "bug" and seviority_level is "high" or "critical" => route to "engineering"
        - If issue_type is "feature_request" => route to "product"
        - If subject/message has words like "billing", "payment", or "invoice" => route to "billing"
        - Default => route to "support"

        Be concise and accurate in your reasoning.
        """
    )
)
📝 How to use this agent
➡ After getting the output from ticket_classifier_agent, pass that + original ticket info to this agent.

Example:

python
Copy
Edit
ticket_input = {
    "ticket_id": "12345",
    "customer_tier": "premium",
    "subject": "API returning 500 errors intermittently",
    "message": "Hi, our production system has been failing"
}

classification_result = {
    "issue_type": "bug",
    "seviority_level": "high",
    "sentiment": "angry",
    "prioriy_score": 0.85
}

combined_input = { **ticket_input, **classification_result }

result = routing_decision_agent(combined_input)
print(result)
✅ Summary
➡ You now have:

ticket_classifier_agent → classifies ticket

routing_decision_agent → decides department + action

If you want, I can help you:

Wrap this into a nice function / pipeline

Add validation to check outputs

Add logging or file save for results

Shall we? 🚀